on:
  push:
    branches:
      - staging
  pull_request:
    types: [opened, synchronize, edited, reopened]
    branches:
      - staging

      
name: azure-staging-arm
jobs:
  check:
    name: Check files
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
      
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD &gt; files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file != stagingARM/* ]]; then
              echo "This modified file is not under the 'db' folder."
              echo "::set-output name=run_job::false"
              break
            else
              echo "::set-output name=run_job::true"
            fi
          done &lt; files.txt

  delete-old-container:
    needs: check
    if: needs.check.outputs.run_job == 'true'
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@main
      # Log into Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        # Delete container
      - name: Delete container
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az container delete --name staging --resource-group TestResourceGroup --yes
  
  build-and-deploy:
    needs: delete-old-container
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@main
      # Log into Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        # Deploy ARM template
      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.RESOURCE_GROUP }}
          template: ./azuredeploystaging.json
          parameters: imageRegistryPassword=${{ secrets.REGISTRY_PASSWORD }}

        # output containerName variable from template
      - run: echo ${{ steps.deploy.outputs.containerName }}
