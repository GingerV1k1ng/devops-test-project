name: CI/CD Staging

on:
  push:
    branches:
      - staging
  pull_request:
    types: [opened, synchronize, edited, reopened]
    branches:
      - staging

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
      
        # step 1: Checkout GitHub Action
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@master
      
        # step 2: Docker login        
        - name: 'Docker login'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER}}
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}
            
        # step 3: Build Docker Image  
        - name: Build Docker
          run: docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER}}/myimage:${{ github.sha }} --build-arg SECRET_PORT=${{ secrets.SECRET_PORT }}
        
        # step 4: Push Docker to Azure Registry  
        - name: Push Docker
          run: docker push ${{ secrets.REGISTRY_LOGIN_SERVER}}/myimage:${{ github.sha }}
    
    test:
      needs: build
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
          registry-url: "https://npm.pkg.github.com"

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build 
        run: docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER}}/myimage:${{ github.sha }} --build-arg SECRET_PORT=${{ secrets.SECRET_PORT }}

      - name: Start frontend and run tests
        run: |
          docker run -d --name webapp -p 80:80 ${{ secrets.REGISTRY_LOGIN_SERVER}}/myimage:${{ github.sha }} &
          npm run test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: playwright-report
          path: playwright-report
    
    delete-old-container:
      needs: [build, test]
      runs-on: ubuntu-latest
      steps:
      # Checkout code
      - uses: actions/checkout@main
      # Log into Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        # Delete container
      - name: Delete container
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az container delete --name staging --resource-group TestResourceGroup --yes
    
    deploy:
        name: deploy
        needs: [build, test, delete-old-container]
        if: github.event_name == 'push'
        runs-on: ubuntu-latest
        steps:
          # Checkout code
          - uses: actions/checkout@main
          # Log into Azure
          - uses: azure/login@v1
            with:
              creds: ${{ secrets.AZURE_CREDENTIALS }}
          # Deploy ARM template
          - name: Run ARM deploy
            uses: azure/arm-deploy@v1
            with:
              subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
              resourceGroupName: ${{ secrets.RESOURCE_GROUP }}
              template: ./azuredeploystaging.json
              parameters: imageRegistryPassword=${{ secrets.REGISTRY_PASSWORD }}

          # output containerName variable from template
          - run: echo ${{ steps.deploy.outputs.containerName }}
